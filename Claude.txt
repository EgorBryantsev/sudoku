A solution to the deep copy by Claude



// SudokuGrid.java
import java.awt.Point;

public class SudokuGrid {
    private static final int SIZE = 9;

    private int[][] grid;

    public SudokuGrid(int[][] sudoku) {
        this.grid = new int[SIZE][SIZE];
        for (int r = 0; r < SIZE; r++) {
            for (int c = 0; c < SIZE; c++) {
                this.grid[r][c] = sudoku[r][c];
            }
        }
    }

    public SudokuGrid copy() {
        int[][] newGrid = new int[SIZE][SIZE];
        for (int r = 0; r < SIZE; r++) {
            System.arraycopy(this.grid[r], 0, newGrid[r], 0, SIZE);
        }
        return new SudokuGrid(newGrid);
    }

    public Point findEmptyCell() {
        for (int r = 0; r < SIZE; r++) {
            for (int c = 0; c < SIZE; c++) {
                if (grid[r][c] == 0) {
                    return new Point(r, c);  
                }
            }
        }
        return null; 
    }

    public void print() {
        System.out.println("+-----------------------+");
        for (int r = 0; r < SIZE; r++) {
            for (int c = 0; c < SIZE; c++) {
                if (c == 0 || c == 3 || c == 6) {
                    System.out.print("| ");
                }
                System.out.print(grid[r][c] == 0 ? " " : grid[r][c]);
                System.out.print(" ");
            }
            System.out.print("| ");
            System.out.println();
            if (r == 2 || r == 5 || r == 8) {
                System.out.println("+-----------------------+");
            }
        }
        System.out.println();
    }

    public void fillCell(int r, int c, int d) {
        grid[r][c] = d;
    }

    public boolean givesConflict(int r, int c, int d) {
        return rowConflict(r, d) || colConflict(c, d) || boxConflict(r, c, d);
    }

    private boolean rowConflict(int r, int d) {
        for (int c = 0; c < SIZE; c++) {
            if (grid[r][c] == d) {
                return true;
            }
        }
        return false;
    }

    private boolean colConflict(int c, int d) {
        for (int r = 0; r < SIZE; r++) {
            if (grid[r][c] == d) {
                return true;
            }
        }
        return false;
    }

    private boolean boxConflict(int r, int c, int d) {
        int rowStart = (r / 3) * 3;
        int colStart = (c / 3) * 3;
        for (int rq = 0; rq < 3; rq++) {
            for (int cq = 0; cq < 3; cq++) {
                if (grid[rowStart + rq][colStart + cq] == d) {
                    return true;
                }
            }
        }
        return false;
    }
}

// SudokuSolver.java
import java.awt.Point;

public class SudokuSolver {
    private SudokuGrid originalGrid;
    private SudokuGrid workingGrid;

    public SudokuSolver(SudokuGrid grid) {
        this.originalGrid = grid;
        this.workingGrid = grid.copy();
    }

    public boolean solve() {
        Point emptyCell = workingGrid.findEmptyCell();
        if (emptyCell == null) {
            return true;
        }
        int r = emptyCell.x;
        int c = emptyCell.y;
        for(int d = 1; d <= 9; d++) {
            if (!workingGrid.givesConflict(r, c, d)) {
                workingGrid.fillCell(r, c, d);
                if (solve()) {
                    return true;
                }
                workingGrid.fillCell(r, c, 0);
            }
        }
        return false;
    }
    
    public void solveIt() {
        System.out.println("Original Sudoku:");
        originalGrid.print();
        
        if (solve()) {
            System.out.println("Solution found:");
            workingGrid.print();
        } else {
            System.out.println("No solution exists.");
            System.out.println("Original Sudoku (unchanged):");
            originalGrid.print();
        }
    }

    public static void main(String[] args) {
        int[][] sudoku = {
            {0, 0, 0, 0, 0, 0, 0, 0, 9},
            {5, 9, 0, 0, 0, 0, 3, 0, 0},
            {4, 0, 0, 0, 6, 0, 0, 0, 5},
            {0, 0, 2, 0, 0, 0, 8, 7, 0},
            {0, 0, 6, 0, 0, 4, 0, 0, 0},
            {0, 3, 0, 0, 8, 0, 0, 0, 0},
            {0, 0, 0, 6, 0, 0, 0, 3, 2},
            {0, 0, 0, 3, 0, 0, 0, 1, 0},
            {0, 0, 0, 5, 4, 9, 0, 0, 0} 
        };

        SudokuGrid grid = new SudokuGrid(sudoku);
        SudokuSolver solver = new SudokuSolver(grid);

        solver.solveIt();
    }
}